初版
尚硅谷Mysql核心技术的视频学习相关记录：

-3月24学习：
*****start*********
-- select * from employees
--
-- 查询常量值
SELECT
	100 AS num;-- 查询表达式：
SELECT
	100 % 98;-- 查询函数：
SELECT
	VERSION( );-- 起别名：
SELECT
	100 % 98 AS result;
SELECT
	last_name AS 姓,
	first_name AS 名
FROM
	employees;-- 方式2：
SELECT
	last_name 姓,
	first_name 名
FROM
	employees;-- 查询sakary，显示out put,双引号的使用
SELECT
	salary AS "out put"
FROM
	employees;-- 去重：
--
-- 查询员工所在部门编号：
SELECT DISTINCT
	( department_id )
FROM
	employees;-- 9.+号作用
/**

java中的+号：
1.运算符：两个操作数都为数值型；
2.连接符：只要有一个操作数为字符串

mysql中的+号：
仅仅只有一个功能：运算符

select 100+90;  两个操作数都是数值型，做加法运算
SELECT '123'+90  ;其中一方位字符型，试图将字符型的数值转换为数值型，如果转换成功，则继续做加法运算

SELECT 'john'+90;   如果转换失败，则将字符型数值转换为0

SELECT null+0;    一方为null，结果为null
*/--
-- 查询员工名和姓链接成一个字段，并显示为姓名
SELECT
	last_name + first_name AS 姓名
FROM
	employees;-- 连接字符函数
-- CONCAT(str1,str2,...)
SELECT
	CONCAT( last_name, first_name ) 姓名
FROM
	employees;

*****end*********


*************3月25日学习：**************
-- 1. 下面的语句是否可以执行成功
select last_name , job_id , salary as sal
from employees;
-- 2. 下面的语句是否可以执行成功
select * from employees;
-- 3. 找出下面语句中的错误
select employee_id , last_name，
salary * 12 “ANNUAL SALARY”
from employees;

select employee_id , last_name,
salary * 12 "ANNUAL SALARY"
from employees;
-- 4. 显示表 departments 的结构，并查询其中的全部数据

DESC departments;
SELECT * FROM departments;

-- 5. 显示出表 employees 中的全部 job_id（不能重复）

SELECT DISTINCT job_id from employees;
-- 6. 显示出表 employees 的全部列，各个列之间用逗号连接，列头显示成 OUT_PUT


SELECT IFNULL(commission_pct,0) AS 结果,commission_pct from employees;

SELECT CONCAT(first_name,',',last_name,',',job_id,',',IFNULL(commission_pct,0)) AS OUT_PUT FROM employees;


进阶二：

条件查询：

/**
语法：select 查询列表 from 表名  where   筛选条件；

分类：
  1.按条件表达式筛选：
			条件运算符； > < = !=  <>
	2.按逻辑表达式查询：
	逻辑运算符： && || !
							and  or  not

							&& 和and  两个条件都为true,结果为true,反之为false;
							|| 和 or  只要有一个条件为true 结果为true,反之为false;
							! 或 not 如果链接的两个条件本身为false,结果为true,反之为false;
	3.模糊查询：
			LIKE
			BETWEEN AND
			IN
			IS NULL

*/


1.按条件表达式筛选

#案例1：查询工资 > 12000的员工信息

SELECT * FROM employees where salary > 12000;


#案例2:查询部门编号部位90的员工名和部门编号

SELECT last_name,department_id from employees WHERE department_id != 90;


2.按逻辑表达式筛选

#案例一：查询工资在10000到20000之间的员工名，工资和奖金
SELECT
	last_name,
	salary,
	commission_pct
FROM
	employees
WHERE
	salary >= 10000
	AND salary <= 20000;


#案例二：查询部门编号不是在90 到110之间，或者工资高于15000的员工信息

SELECT * FROM employees WHERE department_id < 90 OR department_id > 110 OR salary > 15000;


#三。模糊查询：

/***
LIKE
特点：
1.一般和通配符搭配使用：
			通配符：
			%  任意多个字符 ，包含0个字符
			_ 任意单个字符
			BETWEEN AND
			IN
			IS NULL*/

#案例1：查询员工名中包含a的员工信息

SELECT * FROM employees WHERE last_name LIKE '%a%';

#查询员工名中第三个字符为e,第五个字符为a的员工名和工资：

SELECT last_name,salary FROM employees WHERE last_name LIKE '__n_l%';

#案例3：查询员工名中第二个字符为_的员工名(转义字符的使用)

SELECT last_name FROM employees where last_name LIKE '_\_%';

<转义字符的使用>
SELECT last_name FROM employees where last_name LIKE '_$_%' ESCAPE '$';


*************3月28日学习********START************


##between and
/**
1.使用between and可以提高代码简洁度
2.包含临界值
3.两个临界值不要调换顺序

*/

#案例一，查询员工编号在100-120之间的员工信息

SELECT * FROM employees WHERE employee_id BETWEEN 100 AND 120;

3.IN关键字

/**
1.含义：判断某字段的值是否属于in列表中的某一项
特点：
		1.使用in提高语句简洁度
		2.in列表的值必须一致或兼容

*/
#查询员工的工种编号是 IT_PROG ,AD_VP,AD_PRES中的一个员工名和工种编号

SELECT last_name,job_id FROM employees where job_id IN('IT_PROG','AD_VP','AD_PRES');


4.is null 使用：
/**
  = 或 <> 不能用于判断null值
	is null 或者is not null 可以判断null 值
**/
#案例1：查询没有奖金的员工名和奖金率

SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NULL;

#安全等于：  <=>  可读性差

#案例1：查询没有奖金的员工名和奖金率

SELECT last_name,commission_pct FROM employees WHERE commission_pct <=> NULL;

#案例二：查询工资为12000的员工信息
#案例1：查询没有奖金的员工名和奖金率

SELECT last_name,salary FROM employees WHERE salary <=> 12000;

#：is null pk   <=>

IS NULL :仅仅可以判断null值
<=> :既可以判断null值，有可以判断普通的数值，可读性较低


#2.查询员工号为176的员工的姓名和部门号和年薪

SELECT
	last_name,
	department_id,
	salary * 12 * (
	1 + IFNULL( commission_pct, 0 )) AS 年薪
FROM
	employees

-- ISNULL(expr)函数的使用
功能：判断某字段或表达式是否为null，如果是，则返回1，否则返回0
SELECT ISNULL(commission_pct) from employees

##进阶三：排序查询
/*
语法：SELECT 查询列表 FROM 表 WHERE 筛选条件 ORDER BY 排序列表 ASC/DESC

特点：1.ASC 升序，DESC 降序  不写，默认升序；
			2.ORDER BY子句中可以支持单个字段，多个字段，表达式，函数，别名
			3.ORDER BY子句一般放在查询语句的最后面，LIMIT子句除外
*/
-- 引入：/
#案例：查询员工信息，要求工资从高到低排序：
SELECT * from employees ORDER BY salary DESC;

#查询部门编号 >= 90的员工信息，按照入职时间的先后进行排序；[添加筛选条件]
SELECT
	*
FROM
	employees
WHERE
	department_id >= 90
ORDER BY
	hiredate ASC;

	#案例：按年薪的高低显示员工的信息和年薪【按表达式进行排序】

	SELECT *,salary * 12 * (1+IFNULL(commission_pct,0)) 年薪
	FROM employees ORDER BY salary * 12 * (1+IFNULL(commission_pct,0)) DESC;


	#案例 ：
		SELECT *,salary * 12 * (1+IFNULL(commission_pct,0)) 年薪
	FROM employees ORDER BY 年薪 DESC;

	#案例：按照姓名的长度显示员工的姓名和工资[按函数排序]
	SELECT LENGTH(last_name) 字节长度,last_name,salary
	FROM employees
	ORDER BY LENGTH(last_name);

	#案例：查询员工信息；要求先按工资进行排序，再按员工编号进行排序【按多个字段进行排序】
	SELECT * FROM employees order by salary ASC,employee_id DESC;

*************3月28日学习********END**************


***********3月30日学习**********START***********

测 试
1. 查询员工的姓名和部门号和年薪，按年薪降序 按姓名升序
SELECT
	last_name,
	department_id,
	salary * 12 *(
	1+IFNULL ( commission_pct, 0 )) AS 年薪
FROM
	employees
ORDER BY
	年薪 DESC,
	last_name ASC
2.选择工资不在 8000 到 17000 的员工的姓名和工资，按工资降序
SELECT
last_name,
salary
FROM
	employees
WHERE
	salary NOT BETWEEN 8000
	AND 17000
ORDER BY
	salary DESC;

3. 查询邮箱中包含 e 的员工信息，并先按邮箱的字节数降序，再按部门号升序

SELECT
	*
FROM
	employees
WHERE
	email LIKE '%e%'
ORDER BY
	LENGTH( email ) DESC,
	department_id ASC;


	##进阶4::常见函数
	/**
	概念：类似于java的方法，将一组逻辑语句封装在方法体中对外暴露方法名
	好处：1.隐藏了实现细节2，提高了代码的重用性
	调用：SELECT 函数名(实参列表) FROM 表 ;
	特点：1.叫什么（函数名）

	2.干什么（函数功能）

	分类：	1.单行函数 CONCAT(str1,str2,...).LENGTH(str),IFNULL(expr1,expr2)
					2.分组函数
	*/



	#一.字符函数

	1. LENGTH(str) 获取参数值的字节个数
SELECT
	LENGTH( 'JOHN' );

	//汉字三个字节
SELECT
	LENGTH( '张三丰' );

	SHOW VARIABLES LIKE '%char%';

	2. CONCAT(str1,str2,...) 拼接字符串

	SELECT CONCAT(last_name,'-',first_name) FROM employees;

	3. UPPER(str),LOWER(str)
	SELECT UPPER('john');
	SELECT LOWER('JOhN');

	##示例将姓变大写，名变小写，然后拼接
	SELECT CONCAT(UPPER(last_name),'-',LOWER(first_name)) 姓名 FROM employees

	4. substr,substring,
	注意：索引从1开始
	#截取 从指定索引出后面所有的字符
	SELECT SUBSTR('李莫愁爱上了陆展源',7) out_put;

	#截取 从指定索引处指定字符长度的字符
	SELECT SUBSTR('李莫愁爱上了陆展源',1,3) out_put;

	##案例；姓名中首字符大写，其他字符小写，然后拼接
SELECT
	CONCAT(
		UPPER(
		SUBSTR( last_name, 1, 1 )),
		'-',
		LOWER(
		SUBSTR( last_name, 2 ))) OUT_PUT
FROM
	employees;

	5. INSTR(str,substr) 返回子串第一次出现的索引，如果找不到返回0

SELECT
	INSTR( '杨不梅爱上了殷六侠', '殷六侠' ) AS out_put ;


6. TRIM([remstr FROM] str)  去前后

SELECT TRIM('     张翠山        ') AS out_put;

SELECT TRIM('a' FROM 'aaaaaaaaaaaaa张aaaaaa翠山aaaaaaaaaaaa') AS out_put;

7. LPAD(str,len,padstr)  用指定的字符实现左填充指定长度

SELECT LPAD('殷素素',10,'*') as out_put;

8. RPAD(str,len,padstr) 右填充

SELECT RPAD('殷素素',10,'*') as out_put;

9. REPLACE(str,from_str,to_str) 替换

SELECT REPLACE('张无忌爱上了周芷若','周芷若','赵敏') AS out_put;

##二.数学函数
 #ROUND(X) 四舍五入
 SELECT ROUND(1.45);
 SELECT ROUND(1.567,2);

 #ceil 向上取整 返回>=该参数的最小整数；
 SELECT CEIL(1.001);
 SELECT CEIL(-1.001);

 #FLOOR(X) 向下取整，返回<=该参数的最大整数；
 SELECT FLOOR(-9.99);

 #TRUNCATE(X,D) 截断
 SELECT TRUNCATE(1.69999,1);

#MOD(N,M) 取余
/**
MOD(a,b) a-a/b*b;
*/
SELECT MOD(-10,-3);
SELECT 10%3;


#3.日期函数：

#NOW() 返回当前系统的日期+时间
SELECT NOW();

#CURDATE() 返回当前日期，不包含时间
SELECT CURDATE();

#CURTIME() 返回当前时间，不包含日期
SELECT CURTIME();

#可以获取指定的部分，年月日，小时，分，秒
SELECT YEAR(NOW()) 年;
SELECT YEAR('1998-1-1') 年;
SELECT YEAR(hiredate) FROM employees;

SELECT MONTH(NOW()) 月;
SELECT MONTHNAME(NOW()) 月;


#STR_TO_DATE(str,format) 将字符通过指定的格式转换为日期；
SELECT STR_TO_DATE('1998-3-2','%Y-%c-%d') as out_put;

#查询入职日期为1992-4-3的员工信息
SELECT * FROM employees WHERE hiredate = '1992-4-3';

SELECT * FROM employees WHERE hiredate = STR_TO_DATE('4-3 1992','%c-%d %Y');

#DATE_FORMAT(date,format) 将日期转换为字符串
SELECT DATE_FORMAT(NOW(),'%y年%m月%d日') AS OUT_PUT;

#查询有奖金的员工名和入职日期：（%月/xx日  xx年）

SELECT
	last_name,
	DATE_FORMAT( hiredate, '%m月%d日 %Y年' ) AS 入职日期
FROM
	employees
WHERE
	commission_pct IS NOT NULL;

	#四。其他函数
	SELECT VERSION();
	SELECT DATABASE();
	SELECT USER();


	***********3月30日学习**********END***********

		***********4月1日学习**********START***********

	#五、流程控制函数：
	#1.if函数 :if else 的效果
	SELECT IF(10>5,'大','小');

SELECT
	last_name,
	commission_pct,
IF
	( commission_pct IS NULL, '没奖金,呵呵', '有奖金,嘻嘻' ) 备注
FROM
	employees;

	#2。case函数的使用一：switch case的效果

	/**
	switch(变量或表达式){
	case 常量1：语句1；break;
	...
	default ：语句n；break;
	}


	mysql中：
	case 要判断的字段或表达式
	when 常量1 then 要显示的值1或语句1
	when 常量2 then 要显示的值2或语句2
	...
	else 要显示的值n或语句n
	end

	*/

	/**
	案例：查询员工的工资，要求
	部门号 =  30，显示的工资为1.1倍
	部门号 = 40 ，显示的工资为1.2倍
	部门号 = 50，显示的工资为1.3倍
	其余的部门，显示工资为原工资
	*/

SELECT
	salary 原始工资,
	department_id,
CASE
		department_id
		WHEN 30 THEN
		salary * 1.1
		WHEN 40 THEN
		salary * 1.2
		WHEN 50 THEN
		salary * 1.3 ELSE salary
	END AS 新工资
FROM
	employees;

	#CASE函数的使用2:类似于多重if
	/**
		java中：
		if(条件一){
				语句1;
			}else if(条件2){
				语句2;
			}else{
				语句n;
			}
	*/

	/**
		mysql中：

		case:
		when 条件1 then 要显示的值1或语句1;
		when 条件2 then 要显示的值2或语句2;
		。。。
		else 要显示的值n或语句n；
	*/
#案例：查询员工的工资情况：
#如果工资>20000,显示A级别；
#如果工资>15000,显示B级别
#如果工资>10000,显示C级别
#否则显示D级别

SELECT salary,
CASE
WHEN salary > 20000 THEN 'A'
WHEN salary > 15000 THEN 'B'
WHEN salary > 10000 THEN 'C'
ELSE 'D'
END AS 工资级别
FROM employees;


#测试题目
1. 显示系统时间(注：日期+时间)
SELECT NOW();

2. 查询员工号，姓名，工资，以及工资提高百分之 20%后的结果（new salary）
SELECT
	employee_id,
	last_name,
	salary,
	salary * 1.2 "new salary"
FROM
	employees;

3. 将员工的姓名按首字母排序，并写出姓名的长度（length）
SELECT LENGTH(last_name) ,SUBSTR(last_name,1,1) 首字符,last_name
FROM employees
ORDER BY 首字符;

4. 做一个查询，产生下面的结果
<last_name> earns <salary> monthly but wants <salary*3>

SELECT CONCAT(last_name,' earns',salary,'month but wants',salary*3) as "dream salary"
from employees WHERE salary = 24000;

5.使用 case-when，按照下面的条件：
job grade
AD_PRES A
ST_MAN B
IT_PROG C
SA_REP D
ST_CLERK E

	SELECT
		last_name,job_id AS job,
	CASE
			job_id
			WHEN 'AD_PRES' THEN
			'A'
			WHEN 'ST_MAN' THEN
			'B'
			WHEN 'IT_PROG' THEN
			'C'
			WHEN 'SA_REP' THEN
			'D'
			WHEN 'ST_CLERK' THEN
			'E'
		END AS grade
	FROM
		employees
		where job_id = 'AD_PRES';

		####二、分组函数：
/**
功能：用作统计使用，又称为聚合函数或统计函数或组函数

分类：
sum 求和 avg 平均值 max 最大值 min 最小值 count 计算个数

特点：
1.sum,avg一般用于处理数值型
	max,min，count 可以处理任何类型
2.以上分组函数忽略null值，
3.可以和distinct搭配实现去重的运算
4.count（）函数
一般使用count（*）统计行数
5.和分组函数一桶查询的字段要求是Group by 后的字段


**/

1.简单使用：
SELECT SUM(salary) FROM employees;
SELECT AVG(salary) FROM employees;
SELECT MIN(salary) FROM employees;
SELECT MAX(salary) FROM employees;
SELECT COUNT(salary) FROM employees;

SELECT SUM(salary),ROUND(AVG(salary),2),MIN(salary),MAX(salary),COUNT(salary) FROM employees;

#2.特点：参数支持哪些类型：
SELECT SUM(last_name),AVG(last_name) FROM employees;//没有意义

SELECT MAX(last_name),MIN(last_name) FROM employees;

SELECT max(hiredate),MIN(hiredate) FROM employees;

SELECT COUNT(last_name) from employees;



3.忽略null
	SELECT
		SUM( commission_pct ),
		avg( commission_pct ),SUM( commission_pct )/ 35,
		SUM( commission_pct )/ 107
	FROM
		employees;

SELECT max(commission_pct),min(commission_pct) from employees;
SELECT COUNT(commission_pct) from employees;

SELECT commission_pct FROM employees;


	#4.和distinct搭配
	SELECT SUM(DISTINCT salary) ,sum(salary) from employees;

	SELECT COUNT(DISTINCT salary) ,COUNT(salary) from employees;


	5.count()函数的详细介绍

	SELECT COUNT(salary) from employees;

	SELECT count(*) FROM employees
	SELECT COUNT(1) FROM employees;

	效率：MYISM,存储引擎下，count（*）的效率高
	INNODB存储引擎下，count(*) 和 COUNT(1) 的效率高，但是比count(字段)要高一些




	6.和分组函数一同查询的字段有限制
	SELECT AVG(salary),employee_id from employees;


1. 查询公司员工工资的最大值，最小值，平均值，总和，
SELECT MAX(salary) mx_sal,MIN(salary) min_sal,ROUND(AVG(salary),2) ag_sal,SUM(salary) sm_sal FROM employees;

2. 查询员工表中最大入职时间和最小入职时间的相差天数
SELECT DATEDIFF(MAX(hiredate),MIN(hiredate)) DIFFRENG FROM employees;

3. 查询部门编号为90的员工个数
SELECT COUNT(*) FROM employees WHERE department_id = 90;


##进阶5：分组查询
#引入：查询每个部门的平均工资
语法：
			SELECT 分组函数，列（要求出现在group by） 后面
			FROM 表
			WHERE [筛选条件]
			GROUP BY 分组的列表
			ORDER BY 子句

注意：
			 查询列表必须特殊，要求是分组函数和group by 后出现的字段

特点：
			1.分组查询中的筛选条件分为两类
											数据源            位置                       关键字
			分组前筛选     原始表              GROUP BY 子句的前面       WHERE
			分组后筛选     分组后的结果集      GROUP BY 子句的后面        having

			1.分组函数做条件肯定是放在having子句中
			2.能用分组前筛选前的，优先考虑分组前筛选

			2.GROUP BY子句支持单个字段分组，多个字段分组（多个字段之间用逗号隔开没有顺序要求），表达式或函数（用的较少）
			3. 也可以添加排序（排序放在整个分组查询的最后）


			 【简单的分组查询】

			 #案例1：查询每个公众的最高工资

			 SELECT MAX(salary),job_id FROM employees GROUP BY job_id;

			 #案例2：每个位置上的部门个数
			 SELECT COUNT(*),location_id FROM departments GROUP BY location_id;

		***********4月1日学习**********END***********

		***********4月4日学习******START********
		#添加分组前筛选条件
		#案例1:查询邮箱中包含a字符的，每个部门的平均工资
		SELECT Avg(salary),department_id
		from employees
		where email like '%a%'
		GROUP BY department_id;

		#案例2：查询有奖金的每个领导手下员工的最高工资
		SELECT MAX(salary),manager_id
		from employees
		where commission_pct is not NULL
		GROUP BY manager_id

		# 添加分组后的筛选条件

		#案例1：查询哪个部门的员工个数 》2
		#1.查询每个部门的员工个数


		SELECT COUNT(*),department_id
		from employees
		GROUP BY department_id

		#2.根据1的结果进行筛选，查询哪个部门的员工个数 > 2

		SELECT COUNT(*),department_id
		from employees
		GROUP BY department_id
		HAVING COUNT(*) > 2;

		#案例2:查询每个工种有奖金的员工的最高工资 > 12000 的工种编号和最高工资。
		#1.查询每个工种有奖金的员工的最高工资


		SELECT MAX(salary),job_id
		from employees
		WHERE commission_pct is not NULL
		GROUP BY job_id;

		#2.根据1的结果继续筛选，最高工资> 12000

				SELECT MAX(salary),job_id
		from employees
		WHERE commission_pct is not NULL
		GROUP BY job_id
		HAVING MAX(salary) > 12000;

		#案例3 ： 查询领导编号> 102 的每个领导手下的最低工资 > 5000的领导编号是哪个，以及其最低工资

		#1.查询每个领导手下的员工的固定最低工资
		SELECT MIN(salary),manager_id
		from employees
		GROUP BY manager_id;

		#2.添加筛选条件，编号》102
				SELECT MIN(salary),manager_id
		from employees
		where manager_id > 102
		GROUP BY manager_id;

		#3.添加筛选条件，最低工资 > 5000
SELECT
	MIN( salary ),
	manager_id
FROM
	employees
WHERE
	manager_id > 102
GROUP BY
	manager_id
HAVING
	MIN( salary ) > 5000


	#按照表达式或函数进行分组：

	#案例：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数 > 5的有哪些

	#1.查询每个长度的员工个数

	SELECT COUNT(*),LENGTH(last_name) len_name
	FROM employees
	GROUP BY LENGTH(last_name);

	#2，添加筛选条件(支持别名)

	SELECT COUNT(*),LENGTH(last_name) len_name
	FROM employees
	GROUP BY len_name
	HAVING COUNT(*)>5;

	#按多个字段进行分组

	#案例：查询每个部门，每个工种的员工的平均工资
	SELECT AVG(salary),department_id,job_id
	FROM employees
	GROUP BY department_id,job_id;###顺序可以变换

	#添加排序
	#案例：查询每个部门每个工种的员工的平均工资，并且按平均工资的高低显示


	SELECT AVG(salary),department_id,job_id
	FROM employees
	WHERE department_id IS NOT NULL
	GROUP BY department_id,job_id
	ORDER BY AVG(salary) DESC;

	#1. 查询各 job_id 的员工工资的最大值，最小值，平均值，总和，并按 job_id 升序
	SELECT MAX(salary),MIN(salary),AVG(salary),SUM(salary)
	from employees
	GROUP BY job_id
	ORDER BY job_id;

#2. 查询员工最高工资和最低工资的差距（DIFFERENCE）
SELECT MAX(salary) - MIN(salary) DIFFERENCE
from employees;
#3. 查询各个管理者手下员工的最低工资，其中最低工资不能低于 6000，没有管理者的员
工不计算在内
SELECT MIN(salary),manager_id
from employees
WHERE manager_id is not NULL
GROUP BY manager_id
HAVING MIN(salary) >= 6000


#4. 查询所有部门的编号，员工数量和工资平均值,并按平均工资降序
SELECT department_id,	COUNT(*),AVG(salary) a
FROM employees
GROUP BY department_id
ORDER BY a desc;

5. 选择具有各个 job_id 的员工人数

SELECT COUNT(*)个数，job_id
FROM employees
GROUP BY job_id;

***********4月4日学习******END******

